(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/kevin/LBC/docui/src/breadcrumbs-item.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
 */

var BreadcrumbsItem = React.createClass({displayName: "BreadcrumbsItem",
    render: function() {
    	console.log(this.props.item)
    	if (this.props.item.current != true){
	        return (
	            React.createElement("li", null, React.createElement("span", {className: "bread-label"}, React.createElement("a", {href: this.props.item.href}, this.props.item.label)))
	        );
    	}
    	else {
	        return (
	            React.createElement("li", null, React.createElement("span", {className: "bread-label current"}, this.props.item.label))
	        );    		
    	}
    }
})

module.exports = BreadcrumbsItem;

},{}],"/home/kevin/LBC/docui/src/breadcrumbs.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
 */
var BreadcrumbsItem = require('./breadcrumbs-item');

var Breadcrumbs = React.createClass({displayName: "Breadcrumbs",
    items: [],
    getInitialState: function(){
        return {path: '/', items: []}
    },
    recurse: function(path, lvl){
        var matches = path.match(/(.*\/)?([a-zA-Z0-9\-]+)/);
        if (matches !== null){
            href = '#'+matches[0];
            if (typeof(matches[1]) != "undefined"){
                this.recurse(matches[1], lvl+1)
            }
            href = '#'+matches[0];
            label = matches[2].replace(/\//g, '')
            console.log(lvl, lvl==0)
            this.items.push({
                               id: matches[0],
                               href: href,
                               label: label,
                               current: lvl==0
                            });
        }
    },
    render: function(){
        this.items = [];
        this.recurse(this.props.path, 0)
        var breadItems = this.items.map(function(b){
            if (b.label != '/'){
                return (
                    React.createElement(BreadcrumbsItem, {item: b, key: b.id})
                )
            }
        });
        return (
            React.createElement("div", {className: "breadcrumbs"}, 
                React.createElement("ul", null, 
                    React.createElement("li", null, React.createElement("span", {className: "bread-label home"}, React.createElement("a", {href: "/#/"}, React.createElement("i", {className: "fa fa-home", "aria-hidden": "true"}), "Hoomie!"))), 
                    breadItems
                )
            )
        )
    }
});

module.exports = Breadcrumbs;

},{"./breadcrumbs-item":"/home/kevin/LBC/docui/src/breadcrumbs-item.js"}],"/home/kevin/LBC/docui/src/doc-box.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16. 
 */

var Breadcrumbs = require('./breadcrumbs')
var DocList = require('./doc-list');

var DocBox = React.createClass({displayName: "DocBox",
    path: '/',
    baseUrl: "http://"+window.location.hostname+":"+window.location.port+"/test",
    getInitialState: function(){
       return {data: {}, path: '/'}
    },
    componentDidMount: function(){
        hash = window.location.hash.substr(1);
        this.path = hash;
        setInterval(this.loadFolders(this.path), this.props.pollInterval);
        $(window).on('hashchange', function(){
            subfolder = window.location.hash.substr(1);
            context.path = subfolder;
            context.loadFolders(subfolder);
        });
        context = this;
    },
    sanitizePath: function(subfolder){
        var ret = subfolder.replace(/\//g, '');
        return ret;
    },
    recurse: function(data, path){
        if (!path || path == '/'){
            return data;
        }
        part = path.match(/\/?([a-zA-Z\-0-9]+)(.*)/)
        path = this.sanitizePath(part[1]);
        if (path && data.hasOwnProperty(path)){
            if (data[path].hasOwnProperty('children')){
                data = this.recurse(data[path].children, part[2]);
            }
            else if (data[path].hasOwnProperty('versions')) {
                data = data[path].versions;
            }
            else {
                data = {
                    master:
                    {
                        url: context.baseUrl+"/"+path+"/master"
                    }
                };
            }
        }
        return data;
    },
    loadFolders: function(subfolder) {
        $.ajax({
            url: "/list.json",
            dataType: 'json',
            cache: false,
            success: function(data) {
                data = context.recurse(data, context.path);
                this.setState({data: data, path: context.path});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    render: function() {
        return (
            React.createElement("div", {className: "doc-box"}, 
                React.createElement(Breadcrumbs, {path: this.state.path}), 
                React.createElement(DocList, {data: this.state.data})
            )
        )
    }
});

module.exports = DocBox;

},{"./breadcrumbs":"/home/kevin/LBC/docui/src/breadcrumbs.js","./doc-list":"/home/kevin/LBC/docui/src/doc-list.js"}],"/home/kevin/LBC/docui/src/doc-list.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
 */

var DocSquare = require('./doc-square');
var DocVersion = require('./doc-version');

var DocList = React.createClass({displayName: "DocList",
    render: function() {
        if ($.isEmptyObject(this.props.data)){
            return (
                React.createElement("span", null, "I'm Empty -_-")
            );
        }
        else {
            var docNodes = []
            $.each(this.props.data, function(idx, docs){
                if (!$.isEmptyObject(docs)){
                    if (docs.hasOwnProperty('url')){
                        console.log(docs);
                        docNodes.push(
                            React.createElement(DocVersion, {version: idx, name: docs.name, color: docs.color, url: docs.url, key: idx})
                        )
                    }
                    else {
                        docNodes.push(
                            React.createElement(DocSquare, {firstLetter: docs.firstLetter, color: docs.color, fullName: docs.fullName, key: docs.key})
                        )
                    }

                }

            });
            return (
                React.createElement("div", {className: "doc-list", data: this.props.data}, 
                   docNodes
                )
            );
        }
    }
});

module.exports = DocList;

},{"./doc-square":"/home/kevin/LBC/docui/src/doc-square.js","./doc-version":"/home/kevin/LBC/docui/src/doc-version.js"}],"/home/kevin/LBC/docui/src/doc-square.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
 */

var DocSquare = React.createClass({displayName: "DocSquare",
    handleClick: function(path){
        window.location.hash = window.location.hash + path +"/";

    },
    render: function() {
        var boundClick = this.handleClick.bind(this, this.props.fullName);
        var divStyle = {
            backgroundColor: this.props.color
        }
        return (
            React.createElement("div", {className: "doc-square", style: divStyle, onClick: boundClick}, 
                React.createElement("h2", null, this.props.firstLetter), 
                React.createElement("span", null, this.props.fullName)
            )
        )
    },

});

module.exports = DocSquare;

},{}],"/home/kevin/LBC/docui/src/doc-version.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
 */

var DocVersion = React.createClass({displayName: "DocVersion",
    render: function() {
    	var divStyle = {
            backgroundColor: this.props.color
        }
        return (
            React.createElement("div", {className: "doc-square doc-version", style: divStyle}, 
                React.createElement("h3", null, this.props.name), 
                React.createElement("a", {href: this.props.url}, "browse")
            )
        )
    },

});

module.exports = DocVersion;

},{}],"/home/kevin/LBC/docui/src/index.js":[function(require,module,exports){
/**
 * Created by kevin on 07/03/16.
  */

var DocBox = require('./doc-box');

ReactDOM.render(
    React.createElement("div", {className: "main"}, 
        React.createElement("h1", null, "LBC Tech doc"), 
        React.createElement(DocBox, {pollInterval: 20000})
    ),
    document.getElementById('index')
);

},{"./doc-box":"/home/kevin/LBC/docui/src/doc-box.js"}]},{},["/home/kevin/LBC/docui/src/index.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
